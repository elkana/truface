def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'realm-android'

android {
    compileSdkVersion 30

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.ppu.truface"
        minSdkVersion 24
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

        // ndk { abiFilters 'x86', 'armeabi-v7a','arm64-v8a' }
    }

    // splits {
    //     abi {
    //         // Enables building multiple APKs per ABI.
    //         enable true

    // //          // By default all ABIs are included, so use reset() and include to specify that we only
    // //      // want APKs for x86 and x86_64.

    // //      // Resets the list of ABIs that Gradle should create APKs for to none.
    //         reset()
    // //         // include "x86", "x86_64"
    // //         // include "x86", "x86_64", "armeabi", "armeabi-v7a", "arm64-v8a"
    //         include 'x86_64', 'armeabi-v7a', 'arm64-v8a'

    // //         // Specifies that we do not want to generate a universal APK that includes all ABIs.
    //         universalApk false
    //     }
    // }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
            minifyEnabled false
            shrinkResources false
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    // implementation (name: 'trueface-sdk-non-spoof-3.1.0', ext: 'aar')
    implementation (name: 'trueface-sdk-3.1.0', ext: 'aar')
    api 'com.otaliastudios:cameraview:2.7.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    // implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'io.realm:android-adapters:3.1.0'
    implementation 'com.koushikdutta.ion:ion:3.0.8'
}
